// This file is generated by Claude 3.5. It serves as a placeholder for the test cases of the GR Kerr-Schild geodesic pusher.
// It is not meant to be used as is, but rather as a starting point for the test cases.


#include "catch2/catch_test_macros.hpp"
#include "catch2/matchers/catch_matchers_floating_point.hpp"
#include "systems/policies/coord_policy_gr_ks_sph_gca.hpp"
#include "utils/vec.hpp"

using namespace Aperture;
using value_t = Scalar;

// Helper function to calculate the Carter constant
value_t carter_constant(value_t a, const vec_t<value_t, 3>& x, const vec_t<value_t, 3>& u) {
    value_t r = x[0], theta = x[1];
    value_t ur = u[0], utheta = u[1], uphi = u[2];
    return r * r * utheta * utheta + std::cos(theta) * std::cos(theta) * 
           (a * a * (1 - ur * ur - utheta * utheta) / (1 - ur * ur) + uphi * uphi / (std::sin(theta) * std::sin(theta)));
}

TEST_CASE("GR Kerr-Schild Geodesic Pusher - Advanced", "[gr_ks_geodesic_advanced]") {
    value_t dt = 0.01;  // Time step
    int n_iter = 1000;
    bool is_photon = false;

    SECTION("Circular orbit in Kerr spacetime") {
        value_t a = 0.9;  // Kerr parameter (rotating black hole)
        value_t r = 10.0;  // Initial radius
        value_t theta = M_PI / 2;  // Equatorial plane
        
        // Calculate initial velocity for a circular orbit
        value_t omega = std::sqrt(1.0 / (r * std::sqrt(r) + a));
        value_t v_phi = r * omega / std::sqrt(1 - 3 / r + 2 * a * omega);
        
        vec_t<value_t, 3> x = {r, theta, 0.0};
        vec_t<value_t, 3> u = {0.0, 0.0, v_phi};

        value_t initial_r = x[0];
        value_t initial_carter = carter_constant(a, x, u);

        gr_ks_geodesic_advance(a, dt, x, u, is_photon, n_iter);

        // Check that r remains approximately constant
        CHECK_THAT(x[0], Catch::Matchers::WithinRel(initial_r, value_t(1e-3)));

        // Check that θ remains close to π/2 (equatorial plane)
        CHECK_THAT(x[1], Catch::Matchers::WithinRel(M_PI / 2.0, 1e-3));

        // Check that φ has increased (orbital motion)
        CHECK(x[2] > 0.0);

        // Check conservation of Carter constant
        value_t final_carter = carter_constant(a, x, u);
        CHECK_THAT(final_carter, Catch::Matchers::WithinRel(initial_carter, value_t(1e-3)));
    }

    // SECTION("Photon motion near black hole") {
    //     value_t a = 0.5;  // Kerr parameter
    //     vec_t<value_t, 3> x = {5.0, M_PI / 4, 0.0};  // Initial position
    //     vec_t<value_t, 3> u = {0.1, 0.1, 0.1};  // Initial velocity
    //     is_photon = true;

    //     value_t initial_r = x[0];
    //     value_t initial_carter = carter_constant(a, x, u);

    //     gr_ks_geodesic_advance(a, dt, x, u, is_photon, n_iter);

    //     // Check that motion has occurred
    //     CHECK(x[0] != initial_r);
    //     CHECK(x[1] != M_PI / 4);
    //     CHECK(x[2] != 0.0);

    //     // Check conservation of Carter constant for photons
    //     value_t final_carter = carter_constant(a, x, u);
    //     CHECK_THAT(final_carter, Catch::Matchers::WithinRel(initial_carter, 1e-3));

    //     // Check that the speed of the photon remains constant (c = 1 in geometric units)
    //     value_t speed_squared = u[0] * u[0] + u[1] * u[1] + u[2] * u[2];
    //     CHECK_THAT(speed_squared, Catch::Matchers::WithinRel(1.0, 1e-6));
    // }
}
